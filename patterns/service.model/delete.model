// TODO:empty

import {{ getRepository }} from 'typeorm';
import {MODEL} from '../models/{MODEL}';
import {MODEL}Log from '../models/{MODEL}Log';

interface Request {{
    id: string;
    user_id: string;
}};

class {TYPE}{MODEL}Service {{
    public async execute({{id, user_id}}: Request): Promise<void> {{

        const {MODELLOWER}Repository = getRepository({MODEL});
        const {MODELLOWER}LogRepository = getRepository({MODEL}Log);

        const {MODELLOWER}Exists = await {MODELLOWER}Repository.findOne({{
            where: {{
                id,
                deleted_at: null
            }}
        }});

        if(!{MODELLOWER}Exists) {{
            throw new Error('{MODELLOWER} not found');
        }}

        await {MODELLOWER}Repository.update({MODELLOWER}Exists.id,{{
            deleted_at: new Date()
        }});

        const {MODELLOWER}log = {MODELLOWER}LogRepository.create({{
            user_id,
            {MODELLOWER}_id: id,
            code: 'DELETE',
            message: `{{delete:'${{id}}'}}`
        }});

        await {MODELLOWER}LogRepository.save({MODELLOWER}log);

    }}
}}

export default {TYPE}{MODEL}Service;